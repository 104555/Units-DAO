{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func writeInt(key: String, value: Int) =
    if(value < 0)
        then throw("writing negative value " + value.toString() + " for key " + key)
    else IntegerEntry(key, value)


let configAddressStore = "config"
let config = this.getString(configAddressStore)
  .valueOrErrorMessage("userdata: no config")
  .addressFromString().valueOrErrorMessage("userdata: invalid config address")

let voting = config.getString("contract_voting").valueOrErrorMessage("userdata: no contract_voting").addressFromString().valueOrErrorMessage("userdata: invalid contract_voting")


@Callable(i)
func write(key: String, value: Int) = {
    if i.caller != voting then throw("denied") else
    
    [ IntegerEntry(key, value) ]
}

@Callable(i)
func changeBy(key: String, delta: Int) = {
    if i.caller != voting then throw("denied") else
    
    [ key.writeInt(key.getInteger().valueOrElse(0) + delta) ]
}

@Callable(i)
func delete(key: String) = {
     if i.caller != voting then throw("denied") else

     if !key.getInteger().isDefined() then [] else
    [ DeleteEntry(key) ]
}

@Verifier(tx)
func verify() = {
      func opAllowedStore(op: String) = "op_" + op + "_allowed"
      let enabled = config.getBoolean(opAllowedStore("self_governance_apply_tx")).valueOrElse(true) # inverted values
      if(!enabled) then throw("tx application throw governance not enabled") else

      let id = tx.id.toBase58String()
      let votingResults = config.getString("contract_voting_result").valueOrErrorMessage("userdata: no contract_voting_result").addressFromString().valueOrErrorMessage("invalid contract_voting_result")
      height >= votingResults.getIntegerValue("proposal_allow_broadcast_" + this.toString() + "_" + id)
}
